### JOB ###

type Execution @entity {
    id: ID!
    createdAt: BigInt!
    block: BigInt!
    createTxHash: Bytes!
    keeper: Keeper!
    keeperWorker: Bytes!

    job: Job!
    jobOwner: String!
    jobAddress: Bytes!
    binJobAfter: Bytes!

    compensation: BigInt!
    expenses: BigInt!
    profit: BigInt!

    jobGasUsed: BigInt!
    txGasUsed: BigInt!
    txGasLimit: BigInt!
    baseFee: BigInt!
    gasPrice: BigInt!

    txIndex: BigInt!
    txNonce: BigInt!

    txCalldata: Bytes!
    jobCalldata: Bytes!
    keeperConfig: BigInt!
}

type Job @entity {
    "jobKey"
    id: ID!
    createTxHash: Bytes!
    createdAt: BigInt!
    active: Boolean!
    jobAddress: Bytes!
    jobId: BigInt!
    owner: JobOwner!
    pendingOwner: JobOwner
    jobSelector: Bytes!

    maxBaseFeeGwei: BigInt!
    rewardPct: BigInt!
    fixedReward: BigInt!
    calldataSource: BigInt!
    intervalSeconds: BigInt!

    credits: BigInt!
    lastExecutionAt: BigInt!
    minKeeperCVP: BigInt!

    # Flags
    useJobOwnerCredits: Boolean!
    assertResolverSelector: Boolean!

    # Optinal
    preDefinedCalldata: Bytes
    resolverAddress: Bytes
    resolverCalldata: Bytes

    executionCount: BigInt!
    executionRevertCount: BigInt!
    slashingCount: BigInt!
    depositCount: BigInt!
    withdrawalCount: BigInt!

    totalExpenses: BigInt!
    totalCompensations: BigInt!
    totalProfit: BigInt!

    jobReservedSlasherId: BigInt!
    jobNextKeeperId: BigInt!
    jobSlashingPossibleAfter: BigInt!
    jobCreatedAt: BigInt!

    executions: [Execution!]! @derivedFrom(field: "job")
    deposits: [JobDeposit!]! @derivedFrom(field: "job")
    withdrawals: [JobWithdrawal!]! @derivedFrom(field: "job")
}

type JobDeposit @entity {
    id: ID!
    createTxHash: Bytes!
    job: Job!
    depositor: Bytes!
    createdAt: BigInt!

    amount: BigInt!
    fee: BigInt!
    "total = amount + fee"
    total: BigInt!
}

type JobWithdrawal @entity {
    id: ID!
    createTxHash: Bytes!
    job: Job!
    owner: Bytes!
    to: Bytes!
    createdAt: BigInt!

    amount: BigInt!
}

### JOB OWNER ###

type JobOwner @entity {
    id: ID!
    createTxHash: Bytes!
    createdAt: BigInt!
    credits: BigInt!

    depositCount: BigInt!
    withdrawalCount: BigInt!

    jobs: [Job!]! @derivedFrom(field: "owner")
    deposits: [JobOwnerDeposit!]! @derivedFrom(field: "jobOwner")
    withdrawals: [JobOwnerWithdrawal!]! @derivedFrom(field: "jobOwner")
}

type JobOwnerDeposit @entity {
    id: ID!
    createTxHash: Bytes!
    jobOwner: JobOwner!
    depositor: Bytes!
    createdAt: BigInt!

    amount: BigInt!
    fee: BigInt!
    "total = amount + fee"
    total: BigInt!
}

type JobOwnerWithdrawal @entity {
    id: ID!
    createTxHash: Bytes!
    jobOwner: JobOwner!
    to: Bytes!
    createdAt: BigInt!

    amount: BigInt!
}

### KEEPER ###

type Keeper @entity {
    id: ID!
    createTxHash: Bytes!
    createdAt: BigInt!
    active: Boolean!
    keeperActivationCanBeFinalizedAt: BigInt!
    numericalId: BigInt!
    admin: Bytes!
    worker: Bytes!
    currentStake: BigInt!
    "How much stake lost with slash"
    slashedStake: BigInt!
    "How much stake acquired with slash"
    getBySlashStake: BigInt!
    "How many times keeper were slashed"
    slashedStakeCounter: BigInt!
    "How many times keeper did slash others"
    getBySlashStakeCounter: BigInt!
    "How many jobs currently assigned for that keeper"
    assignedJobsCount: BigInt!
    compensationsToWithdraw: BigInt!
    pendingWithdrawalAmount: BigInt!
    pendingWithdrawalEndsAt: BigInt!
    executionCount: BigInt!

    compensations: BigInt!
    expenses: BigInt!
    profit: BigInt!

    stakeCount: BigInt!
    redeemInitCount: BigInt!
    redeemFinalizeCount: BigInt!
    compensationWithdrawalCount: BigInt!

    stakes: [KeeperStake!]! @derivedFrom(field: "keeper")
    redeemInitiated: [KeeperRedeemInit!]! @derivedFrom(field: "keeper")
    redeemFinalized: [KeeperRedeemFinalize!]! @derivedFrom(field: "keeper")
}

type KeeperStake @entity {
    id: ID!
    createTxHash: Bytes!
    keeper: Keeper!
    staker: Bytes!
    amount: BigInt!
    createdAt: BigInt!
}

type KeeperRedeemInit @entity {
    id: ID!
    createTxHash: Bytes!
    keeper: Keeper!
    initiatedAt: BigInt!
    createdAt: BigInt!
    availableAt: BigInt!
    cooldownSeconds: BigInt!

    inputAmount: BigInt!
    stakeReduction: BigInt!
    slashedStakeReduction: BigInt!
}

type KeeperRedeemFinalize @entity {
    id: ID!
    createTxHash: Bytes!
    keeper: Keeper!
    to: Bytes!
    createdAt: BigInt!

    amount: BigInt!
}

### AGENT (SINGLETON) ###

type Agent @entity {
    id: ID!
    address: Bytes!
    owner: Bytes!
    cvp: Bytes!

    minKeeperCVP: BigInt!
    pendingWithdrawalTimeoutSeconds: BigInt!

    feePpm: BigInt!
    feeTotal: BigInt!

    keepersCount: BigInt!
    activeKeepersCount: BigInt!
    jobsCount: BigInt!
    executionsCount: BigInt!
    lastKeeperId: BigInt!
}
