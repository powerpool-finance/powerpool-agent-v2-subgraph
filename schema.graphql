type Execution @entity {
    id: ID!
    timestamp: BigInt!
    block: BigInt!
    txHash: Bytes!
    keeper: Keeper!
    keeperWorker: Bytes!

    job: Job!
    jobAddress: Bytes!
    binJobAfter: Bytes!
    compensation: BigInt!

    jobGasUsed: BigInt!
    txGasLimit: BigInt!
    baseFee: BigInt!
    gasPrice: BigInt!

    txIndex: BigInt!
    txNonce: BigInt!

    txCalldata: Bytes!
    jobCalldata: Bytes!
    keeperConfig: BigInt!
}

type Job @entity {
    "jobKey"
    id: ID!
    active: Boolean!
    jobAddress: Bytes!
    jobId: BigInt!
    owner: JobOwner!
    pendingOwner: JobOwner
    jobSelector: Bytes!

    maxBaseFeeGwei: BigInt!
    rewardPct: BigInt!
    fixedReward: BigInt!
    calldataSource: BigInt!
    intervalSeconds: BigInt!

    credits: BigInt!
    lastExecutionAt: BigInt!
    minKeeperCVP: BigInt!

    # Flags
    useJobOwnerCredits: Boolean!
    assertResolverSelector: Boolean!

    # Optinal
    preDefinedCalldata: Bytes
    resolverAddress: Bytes
    resolverCalldata: Bytes

    executions: [Execution!]! @derivedFrom(field: "job")
}

type JobOwner @entity {
    id: ID!
    credits: BigInt!

    jobs: [Job!]! @derivedFrom(field: "owner")
}

type Keeper @entity {
    id: ID!
    admin: Bytes!
    worker: Bytes!
    currentStake: BigInt!
    slashedStake: BigInt!
    compensation: BigInt!
    pendingWithdrawalAmount: BigInt!
    pendingWithdrawalEndAt: BigInt!
}
